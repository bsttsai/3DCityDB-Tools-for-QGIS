# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DBLoaderDialog
                                 A QGIS plugin
                    This is an experimental plugin for 3DCityDB.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Konstantinos Pantelios
        email                : konstantinospantelios@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.core import Qgis, QgsMessageLog

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.gui import QgsMessageBar
from qgis.PyQt.QtWidgets import QMessageBox

from ...cdb_loader import CDBLoader # Used only to add the type of the function parameters

from ..gui_db_connector.db_connection_dialog import DBConnectorDialog
from ..gui_db_connector.functions import conn_functions as conn_f

from ... import main_constants as main_c
from .. import cdb4_constants as c
from .functions import tab_conn_widget_functions as wf

from .functions import sql
from .functions import qgis_pkg_installation as inst


# This loads the .ui file so that PyQt can populate the plugin
# with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), "ui", "cdb4_loader_admin_dialog.ui"))

class CDB4LoaderAdminDialog(QtWidgets.QDialog, FORM_CLASS):
    """Administrator Dialog class of the plugin.
    The GUI is imported from an external .ui xml
    """

    def __init__(self, cdbLoader, parent=None):
        """Constructor."""
        super(CDB4LoaderAdminDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots

        self.setupUi(self)

        # Initialize some properties.
        # This is used in order to revert to the original state
        # in reset operations when original text has already changed.
        self.btnConnectToDb.init_text = c.btnConnectToDbC_t
        self.btnMainInst.init_text = c.btnMainInst_t
        self.btnMainUninst.init_text=  c.btnMainUninst_t
        self.btnUsrInst.init_text = c.btnUsrInst_t
        self.btnUsrUninst.init_text = c.btnUsrUninst_t

        #- SIGNALS  (start)  ################################################################

        # 'Connection' group box signals
        self.cbxExistingConn.currentIndexChanged.connect(lambda: self.evt_cbxExistingConn_changed(cdbLoader))
        self.btnNewConn.clicked.connect(lambda: self.evt_btnNewConn_clicked(cdbLoader))
        self.btnConnectToDb.clicked.connect(lambda: self.evt_btnConnectToDb_clicked(cdbLoader))

        # 'Main Installation' group box signals
        self.btnMainInst.clicked.connect(lambda: self.evt_btnMainInst_clicked(cdbLoader))
        self.btnMainUninst.clicked.connect(lambda: self.evt_btnMainUninst_clicked(cdbLoader))

        # 'User Installation' group box signals
        self.cbxUser.currentIndexChanged.connect(lambda: self.evt_cbxUser_changed(cdbLoader))
        self.btnUsrInst.clicked.connect(lambda: self.evt_btnUsrInst_clicked(cdbLoader))
        self.btnUsrUninst.clicked.connect(lambda: self.evt_btnUsrUninst_clicked(cdbLoader))
        
        # Close connection button
        self.btnCloseConn.clicked.connect(lambda: self.evt_btnCloseConn_clicked(cdbLoader))

        #-SIGNALS  (end)  ################################################################

    #-EVENT FUNCTIONS (begin)  #####################################################################

    #'Connection' group box events
    def evt_cbxExistingConn_changed(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Existing Connection'
        comboBox (cbxExistingConn) current index changes.
        """
        # Set the current database connection object variable
        cdbLoader.DB = self.cbxExistingConn.currentData()
        if not cdbLoader.DB:
            return None
        
        #wf.cbxExistingConn_setup(cdbLoader)

        # Variable to store the plugin main dialog
        dlg = cdbLoader.admin_dlg
        # Variable to store database name.
        db_name = cdbLoader.DB.database_name

        # Close the current open connection.
        if cdbLoader.conn is not None:
            cdbLoader.conn.close()

        # Reset the Database Administration tab from previous other content.
        wf.tabDbAdmin_reset(cdbLoader) # disables it!

        # Enable tab.
        dlg.tabDbAdmin.setDisabled(False)

        # Enable button to connect.
        dlg.btnConnectToDb.setText(dlg.btnConnectToDb.init_text.format(db=db_name))
        dlg.btnConnectToDb.setDisabled(False)

    
    def evt_btnNewConn_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'New Connection' pushButton
        (btnNewConn) is pressed.

        Responsible to add VALID new connection to the 'Existing connections'.
        """
        # Bypass the input blockade for the connector dialogue.
        self.setWindowModality(1)

        # Create/Show/Execute additional dialog for the new connection
        dlgConnector = DBConnectorDialog()
        dlgConnector.setWindowModality(2)
        dlgConnector.show()
        dlgConnector.exec_()

        # Variable to store the plugin main dialog.
        dlg = cdbLoader.usr_dlg

        # Add new connection to the Existing connections
        if dlgConnector.new_connection:
            dlg.cbxExistingConn.addItem(
                f"{dlgConnector.new_connection.connection_name}", dlgConnector.new_connection)
                #dlgConnector.close()

        # Re-set the input blockage
        self.setWindowModality(2)


    def evt_btnConnectToDb_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the current 'Connect to {db}' pushButton
        (btnConnectToDb) is pressed.
        """
        #wf.btnConnectToDb_setup(cdbLoader)

        # Variable to store the plugin main dialog.
        dlg = cdbLoader.admin_dlg
        # Variable to store database name.
        db_name = cdbLoader.DB.database_name

        #widget_reset.reset_tabConnection(cdbLoader)

        # Enable 'Connection Status' group box.
        dlg.gbxConnStatus.setDisabled(False)
        dlg.btnCloseConn.setDisabled(False)

        # Attempt to connect to the database
        successful_connection = conn_f.open_connection(cdbLoader, main_c.PLUGIN_NAME_ADMIN)

        if successful_connection and cdbLoader.DB.pg_server_version:
            # Show database name
            dlg.lblConnToDb_out.setText(c.success_html.format(
                text=cdbLoader.DB.database_name))
            # Show server version
            dlg.lblPostInst_out.setText(c.success_html.format(
                text=cdbLoader.DB.pg_server_version))

            # Check that user is an admin.
            if not sql.is_superuser(cdbLoader):
                QMessageBox.critical(
                        cdbLoader.admin_dlg,
                        "User privileges",
                        f"User '{cdbLoader.DB.username}' is not a database superuser!")
                wf.tabDbAdmin_reset(cdbLoader)
                return None

            # Check that database has 3DCityDB installed.
            if sql.is_3dcitydb_installed(cdbLoader):
                version_major = int(cdbLoader.DB.citydb_version.split(".")[0])
                if version_major >= c.CDB_MIN_VERSION:

                    # Show 3DCityDB version
                    dlg.lbl3DCityDBInst_out.setText(c.success_html.format(
                        text=cdbLoader.DB.citydb_version))

                    # Enable 'Main installation' group box.
                    dlg.gbxMainInst.setDisabled(False)
                    dlg.btnMainInst.setText(dlg.btnMainInst.init_text.format(db=db_name))
                    dlg.btnMainUninst.setText(dlg.btnMainUninst.init_text.format(db=db_name))

                    # Check if main package (schema) is installed in database.
                    has_main_inst = sql.is_qgis_pkg_intalled(cdbLoader)
    
                    if has_main_inst:
                        # Set the current user schema name.
                        sql.exec_create_qgis_usr_schema_name(cdbLoader)
                        
                        # Get qgis_pkg version.
                        full_version = f"(v.{sql.fetch_qgis_pkg_version(cdbLoader)})"
                        dlg.lblMainInst_out.setText(c.success_html.format(text=" ".join([c.INST_MSG,full_version]).format(pkg=cdbLoader.QGIS_PKG_SCHEMA)))
                        dlg.btnMainUninst.setDisabled(False)

                        # Get users from database.
                        users = sql.fetch_list_qgis_pkg_usrgroup_members(cdbLoader)
                        wf.fill_users_box(cdbLoader, users)
                    else:
                        dlg.btnMainUninst.setDisabled(True)
                        dlg.lblMainInst_out.setText(c.crit_warning_html.format(text=c.INST_FAIL_MSG.format(pkg=cdbLoader.QGIS_PKG_SCHEMA)))
                else:
                    dlg.lbl3DCityDBInst_out.setText(c.crit_warning_html.format(
                        text=f"{cdbLoader.DB.citydb_version} (minimum major version: {c.CDB_MIN_VERSION})"))
                    cdbLoader.DB.green_citydb_inst = False
                    return None
            else:
                dlg.lbl3DCityDBInst_out.setText(c.failure_html.format(
                    text=c.CDB_FAIL_MSG))

        else: # Connection failed!
            wf.gbxConnStatus_reset(cdbLoader)
            dlg.gbxConnStatusC.setDisabled(False)
            dlg.lblConnToDb_out.setText(c.failure_html.format(text=c.CONN_FAIL_MSG))
            dlg.lblPostInst_out.setText(c.failure_html.format(text=c.PG_SERVER_FAIL_MSG))


    # Admin 'Installation' group box events
    def evt_btnMainInst_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Install to database' pushButton
        (btnMainInst) is pressed.
        """
        #wf.btnMainInst_setup(cdbLoader)
        inst.installation_query(cdbLoader, c.INST_QUERY.format(pkg=cdbLoader.QGIS_PKG_SCHEMA), "main")


    def evt_btnMainUninst_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Uninstall from database' pushButton
        (btnMainUninst) is pressed.
        """
        #wf.btnMainUninst_setup(cdbLoader)
        inst.uninstallation_query(cdbLoader, c.UNINST_QUERY.format(pkg=cdbLoader.QGIS_PKG_SCHEMA), "main")


    # User 'Installation' group box events
    def evt_cbxUser_changed(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Selected User'
        comboBox (cbxUser) current index changes.
        """
        #wf.cbxUser_setup(cdbLoader)
        dlg = cdbLoader.admin_dlg

        # Update current users and user_schema variables.
        cdbLoader.USER = dlg.cbxUser.currentText()

        if not cdbLoader.USER:
            return None
        
        sql.exec_create_qgis_usr_schema_name(cdbLoader, usr_name = cdbLoader.USER)
    
        # Enable 'User installation' group box.
        dlg.gbxUserInst.setDisabled(False)
        dlg.btnUsrInst.setText(dlg.btnUsrInst.init_text.format(usr=cdbLoader.USER))
        dlg.btnUsrUninst.setText(dlg.btnUsrUninst.init_text.format(usr=cdbLoader.USER))

        # Check if user package (schema) is installed in database.
        has_user_inst = sql.is_usr_pkg_installed(cdbLoader)
        if has_user_inst:
            dlg.lblUserInst_out.setText(c.success_html.format(text=c.INST_MSG.format(pkg=cdbLoader.USR_SCHEMA)))
            dlg.btnUsrUninst.setDisabled(False)
        else:
            dlg.lblUserInst_out.setText(c.crit_warning_html.format(text=c.INST_FAIL_MSG.format(pkg=cdbLoader.USR_SCHEMA)))
            dlg.btnUsrUninst.setDisabled(True)


    def evt_btnUsrInst_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Create schema for user' pushButton
        (btnUsrInst) is pressed.
        """
        #wf.btnUsrInst_setup(cdbLoader)
        res = inst.installation_query(cdbLoader, c.INST_QUERY.format(pkg=cdbLoader.USR_SCHEMA), "user")
        if not res: # Query was canceled by user, or error occurred.
            return None

        # Create QgsMessageBar instance.
        cdbLoader.admin_dlg.msg_bar = QgsMessageBar()
        # Add the message bar into the input layer and position.
        cdbLoader.admin_dlg.vLayoutUsrInst.insertWidget(2, cdbLoader.admin_dlg.msg_bar)

        if sql.is_usr_pkg_installed(cdbLoader):

            # Replace with Success msg.
            msg = cdbLoader.admin_dlg.msg_bar.createMessage(c.INST_SUCC_MSG.format(pkg=cdbLoader.USR_SCHEMA))
            cdbLoader.admin_dlg.msg_bar.pushWidget(msg, Qgis.Success, 5)

            # Inform user
            cdbLoader.admin_dlg.lblUserInst_out.setText(c.success_html.format(text=c.INST_MSG.format(pkg=cdbLoader.USR_SCHEMA)))
            QgsMessageLog.logMessage(
                    message=c.INST_SUCC_MSG.format(pkg=cdbLoader.USR_SCHEMA),
                    tag=main_c.PLUGIN_NAME,
                    level=Qgis.Success,
                    notifyUser=True)
        else:
            # Replace with Failure msg.
            msg = cdbLoader.admin_dlg.msg_bar.createMessage(c.INST_ERROR_MSG.format(pkg=cdbLoader.USR_SCHEMA))
            cdbLoader.admin_dlg.msg_bar.pushWidget(msg, Qgis.Critical, 5)

            # Inform user
            cdbLoader.admin_dlg.lblUserInst_out.setText(c.crit_warning_html.format(text=c.INST_FAIL_MSG.format(pkg=cdbLoader.USR_SCHEMA)))
            QgsMessageLog.logMessage(
                    message=c.INST_ERROR_MSG.format(pkg=cdbLoader.USR_SCHEMA),
                    tag=main_c.PLUGIN_NAME,
                    level=Qgis.Critical,
                    notifyUser=True)


    def evt_btnUsrUninst_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Drop schema for user' pushButton
        (btnUsrUninst) is pressed.
        """
        #wf.btnUsrUninst_setup(cdbLoader)
        #TODO: get from uninstallation_query the to be deleted schemas and run a loop here
        # 1 success message + bar per schema drop
        res = inst.uninstallation_query(cdbLoader, c.UNINST_QUERY.format(pkg=cdbLoader.USR_SCHEMA), "user")
        if not res: # Query was cancelled by user, or error occurred.
            return None


    def evt_btnCloseConn_clicked(self, cdbLoader: CDBLoader) -> None:
        """Event that is called when the 'Close current connection' pushButton
        (btnCloseConn) is pressed.
        """
        wf.tabDbAdmin_reset(cdbLoader)

    #-EVENT FUNCTIONS (end) #####################################################################